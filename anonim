# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: BFGAuto
# Description: Send mes
# Author: @Tirandomperson
# Commands:
# .bbon | .bboff
# ---------------------------------------------------------------------------------


# meta developer: @Tirandomperson

import asyncio
from hikkatl import types
from telethon import functions, events

from .. import loader, utils


@loader.tds
class SendMessageModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞—Ä–º–∞ —Å–Ω–µ–∂–∏–Ω–æ–∫ –∏ —Å–Ω–µ–∂–∫–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å"""

    strings = {"name": "BFGAuto"}

    def __init__(self):
        self.running = False
        self.success_message = "<b>üèó–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ<b>"
        self.already_running_message = "‚ùåÔ∏è–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ"

    @loader.unrestricted
    async def bboncmd(self, message: types.Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π '–°–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏', '–ù–∞–π—Ç–∏ —Å–Ω–µ–∂–∏–Ω–∫–∏' –∏ '–°–ª–µ–ø–∏—Ç—å —Å–Ω–µ–∂–æ–∫' –∫–∞–∂–¥—ã–π —á–∞—Å"""
        if self.running:
            await utils.answer(message, self.already_running_message)
            return
        self.running = True

        await utils.answer(message, self.success_message)

        while self.running:
            await message.client(functions.messages.SendMessageRequest(
                peer='bbon',
                message='–°–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏'
            ))
            await asyncio.sleep(10)

            await message.client(functions.messages.SendMessageRequest(
                peer='bbon',
                message='–ù–∞–π—Ç–∏ —Å–Ω–µ–∂–∏–Ω–∫–∏'
            ))
            await asyncio.sleep(10)

            await message.client(functions.messages.SendMessageRequest(
                peer='bbon',
                message='–°–ª–µ–ø–∏—Ç—å —Å–Ω–µ–∂–æ–∫'
            ))
            await asyncio.sleep(10)

            await asyncio.sleep(60 * 60)

    @loader.unrestricted
    async def bboffcmd(self, message: types.Message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π '–°–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏', '–ù–∞–π—Ç–∏ —Å–Ω–µ–∂–∏–Ω–∫–∏' –∏ '–°–ª–µ–ø–∏—Ç—å —Å–Ω–µ–∂–æ–∫'"""
        if not self.running:
            await utils.answer(message, "‚ùåÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            return
        self.running = False
        await utils.answer(message, "‚úîÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    @loader.unrestricted
    async def command(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É' –±–æ—Ç—É @aniversecard_bot"""
        await message.client(functions.messages.SendMessageRequest(
            peer='bbon',
            message='–°–æ–±—Ä–∞—Ç—å —Å–Ω–µ–∂–∏–Ω–∫–∏'
        ))
